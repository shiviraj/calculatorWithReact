{"version":3,"sources":["components/Screen.js","components/Button.js","components/Buttons.js","utils.js","Calculator.js","serviceWorker.js","index.js"],"names":["props","className","text","result","onClick","handleClick","buttonTexts","buttons","map","row","Button","key","operators","operate","num1","operator","num2","undefined","findResult","array","i","length","includes","Calculator","state","buttonClick","bind","numbers","number","push","concat","createArrayOfNumbers","this","setState","performCalculate","e","button","target","innerText","performSpecialOperation","slice","Screen","Buttons","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a4231bbc.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) => {\n  return (\n    <div className=\"screen\">\n      <div className=\"row-1\">{props.text}</div>\n      <div className=\"row-2\">{props.result}</div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport default (props) => (\n  <button onClick={props.handleClick}>{props.text}</button>\n);\n","import React from 'react';\nimport Button from './Button';\n\nconst buttonTexts = [\n  ['C', '^', '%', '/'],\n  ['7', '8', '9', '*'],\n  ['4', '5', '6', '-'],\n  ['1', '2', '3', '+'],\n  ['00', '0', '.', '='],\n];\n\nexport default (props) => {\n  const buttons = buttonTexts.map((row) => {\n    return row.map((text) => (\n      <Button key={text} text={text} handleClick={props.handleClick} />\n    ));\n  });\n  return <div className=\"buttons\">{buttons}</div>;\n};\n","const operators = ['+', '-', '*', '/', '%', '^'];\n\nconst createArrayOfNumbers = (text) => {\n  const numbers = [];\n  let number = '0';\n  for (let i = 0; i < text.length; i++) {\n    if (operators.includes(text[i])) {\n      numbers.push(+number, text[i]);\n      number = '0';\n    } else {\n      number += text[i];\n    }\n  }\n  return numbers.concat(+number);\n};\n\nconst operate = (num1, operator, num2) => {\n  if (num2 === undefined) return num1;\n  switch (operator) {\n    case '+':\n      return num1 + num2;\n    case '-':\n      return num1 - num2;\n    case '*':\n      return num1 * num2;\n    case '/':\n      return num1 / num2;\n    case '%':\n      return (num1 * num2) / 100;\n    case '^':\n      return num1 ** num2;\n  }\n};\n\nconst findResult = (array) => {\n  let result = array[0];\n  for (let i = 0; i < array.length; i++) {\n    if (operators.includes(array[i])) {\n      result = operate(result, array[i], array[++i]);\n    }\n  }\n  return result;\n};\n\nexport { findResult, createArrayOfNumbers };\n","import React from 'react';\n\nimport Screen from './components/Screen';\nimport Buttons from './components/Buttons';\nimport { findResult, createArrayOfNumbers } from './utils';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { text: '', result: 0 };\n    this.buttonClick = this.buttonClick.bind(this);\n  }\n\n  performCalculate() {\n    const numbers = createArrayOfNumbers(this.state.text);\n    this.setState({ text: '', result: findResult(numbers) });\n  }\n\n  performSpecialOperation(text) {\n    if (text === 'C') {\n      return this.setState({ text: '', result: 0 });\n    }\n    this.performCalculate();\n  }\n\n  buttonClick(e) {\n    const button = e.target.innerText;\n    if (button === 'C' || button === '=') {\n      return this.performSpecialOperation(button);\n    }\n    this.setState((state) => ({ text: (state.text + button).slice(0, 21) }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Calculator</h1>\n        <div className=\"calculator\">\n          <Screen text={this.state.text} result={this.state.result} />\n          <Buttons handleClick={this.buttonClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}